if (CMAKE_CROSSCOMPILING)

	if (OS_SYSTEM_NAME MATCHES "Tuxbox")
		set (OperatingSystem "Tuxbox")
		set (CS_OS_HW "tuxbox")
		set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "TripleDragon")
        set (OperatingSystem "TripleDragon")
        set (CS_OS_HW "tuxbox")
        set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "Coolstream")
        set (OperatingSystem "NeutrinoHD")
        set (CS_OS_HW "coolstream")
        set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "NSLU2")
        set (OperatingSystem "SlugOS")
        set (CS_OS_HW "nslu2")
        set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "WRT350NV2")
        set (OperatingSystem "OpenWRT")
        set (CS_OS_HW "wrt350nv2")
        set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "Dockstar")
        set (OperatingSystem "OpenWRT")
        set (CS_OS_HW "dockstar")
        set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "Fonera2")
        set (OperatingSystem "Fonera2")
        set (CS_OS_HW "fonera2")
        set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "DIR-825")
        set (OperatingSystem "DIR-825")
        set (CS_OS_HW "dir825")
        set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "AZBox")
        set (OperatingSystem "AZBox")
        set (CS_OS_HW "azbox")
        set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "agv2+w")
        set (OperatingSystem "agv2+w")
        set (CS_OS_HW "agv2+w")
        set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "WRT54G")
        set (OperatingSystem "WRT54G")
        set (CS_OS_HW "wrt54g")
        set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "Amino")
        set (OperatingSystem "Amino")
        set (CS_OS_HW "amino")
        set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "QboxHD")
        set (OperatingSystem "QboxHD")
        set (CS_OS_HW "qboxhd")
        set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "Padre")
        set (OperatingSystem "Padre")
        set (CS_OS_HW "sparc")
        set (CS_OS_SYS "linux")
    elseif (OS_SYSTEM_NAME MATCHES "FriendlyARM")
        set (OperatingSystem "FriendlyARM")
        set (CS_OS_HW "friendlyarm")
        set (CS_OS_SYS "linux")
    else (OS_SYSTEM_NAME MATCHES "Tuxbox")
        message (STATUS "Unknown cross system name: <${CMAKE_SYSTEM_NAME}>")
        set (OperatingSystem "Unknown")
        set (CS_OS_HW "unknown")
        set (CS_OS_SYS "unknown")
    endif (OS_SYSTEM_NAME MATCHES "Tuxbox")

else (CMAKE_CROSSCOMPILING)
    if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
        set (OperatingSystem "Linux")
        set (CS_OS_HW "pc")
        set (CS_OS_SYS "linux")
    elseif (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
        set (OperatingSystem "FreeBSD")
        set (CS_OS_HW "pc")
        set (CS_OS_SYS "freebsd")
    elseif (OperatingSystem MATCHES "Padre")
        add_definitions ("-DOS_LINUX -DPADRE -DSPARC")
        set (DEFAULT_CS_CONFDIR "/etc/oscam")
    elseif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
        set (OperatingSystem "Mac OS X")
        set (CS_OS_HW "mac")
        set (CS_OS_SYS "macosx")
        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32" )
        SET( CMAKE_CFLAGS "${CMAKE_CFLAGS} -m32" )
    elseif (${CYGWIN})
        set (OperatingSystem "Windows/Cygwin")
        set (CS_OS_HW "pc")
        set (CS_OS_SYS "cygwin")
        set (CMAKE_SYSTEM_PROCESSOR "i386")
    else (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
        message (STATUS "Unknown system name: <${CMAKE_SYSTEM_NAME}>")
        set (OperatingSystem "Unknown")
        set (CS_OS_HW "unknown")
        set (CS_OS_SYS "unknown")
    endif (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
endif (CMAKE_CROSSCOMPILING)

#----------------------- some paths ------------------------------

set (OPTIONAL_LINK_DIR "" CACHE STRING "Some optional link directories")
set (OPTIONAL_INCLUDE_DIR "" CACHE STRING "Some optional include directories")

if (OperatingSystem MATCHES "Windows/Cygwin")
	include_directories (	${CMAKE_CURRENT_SOURCE_DIR}/cygwin
							/usr/include/w32api
							${OPTIONAL_INCLUDE_DIR}
	)

	link_directories (	/usr/lib
						/usr/lib/w32api
						/cygdrive/c/WINDOWS/system32/
						${OPTIONAL_LINK_DIR}
	)
endif (OperatingSystem MATCHES "Windows/Cygwin")



################################################################################
# Global options and config file
################################################################################

if (OperatingSystem MATCHES "Linux")
    add_definitions ("-DOS_LINUX")
    set (DEFAULT_CS_CONFDIR "/etc")
elseif (OperatingSystem MATCHES "Mac OS X")
    add_definitions ("-DOS_MACOSX -DHAVE_PCSC -DNEED_DAEMON")
    set (DEFAULT_CS_CONFDIR "/usr/local/etc")
elseif (OperatingSystem MATCHES "Tuxbox")
    set (DEFAULT_CS_CONFDIR "/var/tuxbox/config")
    if (${CMAKE_SYSTEM_PROCESSOR} MATCHES "mips")
        add_definitions ("-DOS_LINUX -DTUXBOX -DMIPSEL")
    else (${CMAKE_SYSTEM_PROCESSOR} MATCHES "mips")
        add_definitions ("-DOS_LINUX -DTUXBOX -DPPC")
    endif (${CMAKE_SYSTEM_PROCESSOR} MATCHES "mips")
elseif (OperatingSystem MATCHES "TripleDragon")
    add_definitions ("-DOS_LINUX -DTRIPLEDRAGON -DSTB04SCI -DTUXBOX -DPPC")
    set (DEFAULT_CS_CONFDIR "/var/tuxbox/config")
elseif (OperatingSystem MATCHES "NeutrinoHD")
    add_definitions ("-DOS_LINUX -DTUXBOX -DCOOL")
    set (DEFAULT_CS_CONFDIR "/var/tuxbox/config")
elseif (OperatingSystem MATCHES "SlugOS")
    add_definitions ("-DOS_LINUX -DARM")
    set (DEFAULT_CS_CONFDIR "/var/etc")
elseif (OperatingSystem MATCHES "OpenWRT")
    if (CS_OS_HW MATCHES "wrt350nv2")
        add_definitions ("-DOS_LINUX -DARM -DWRT350NV2")
        set (DEFAULT_CS_CONFDIR "/etc/oscam")
    elseif (CS_OS_HW MATCHES "dockstar")
        add_definitions ("-DOS_LINUX -DARM -DDOCKSTAR")
        set (DEFAULT_CS_CONFDIR "/usr/oscam")
    else (CS_OS_HW MATCHES "wrt350nv2")
        add_definitions ("-DOS_LINUX -DARM")
        set (DEFAULT_CS_CONFDIR "/usr/oscam")
    endif (CS_OS_HW MATCHES "wrt350nv2")
elseif (OperatingSystem MATCHES "Fonera2")
    add_definitions ("-DOS_LINUX -DMIPSEL -DUCLIBC")
    set (DEFAULT_CS_CONFDIR "/var/etc")
elseif (OperatingSystem MATCHES "DIR-825")
    add_definitions ("-DOS_LINUX -DMIPSEL -DUCLIBC")
    set (DEFAULT_CS_CONFDIR "/var/etc")
elseif (OperatingSystem MATCHES "AZBox")
    add_definitions ("-DOS_LINUX -DMIPSEL -DAZBOX")
    set (DEFAULT_CS_CONFDIR "/PLUGINS/OpenXCAS/oscamCAS")
elseif (OperatingSystem MATCHES "agv2+w")
    add_definitions ("-DOS_LINUX -DUCLIBC")
    set (DEFAULT_CS_CONFDIR "/etc")
elseif (OperatingSystem MATCHES "WRT54G")
    add_definitions ("-DOS_LINUX -DMIPSEL -DUCLIBC -DUSE_GPIO")
    set (DEFAULT_CS_CONFDIR "/jffs/etc/config/oscam")
elseif (OperatingSystem MATCHES "Amino")
    add_definitions ("-DOS_LINUX -DSH4 -DTUXBOX")
    set (DEFAULT_CS_CONFDIR "/var/tuxbox/config")
elseif (OperatingSystem MATCHES "QboxHD")
    add_definitions ("-DOS_LINUX -DSH4 -DQBOXHD -DTUXBOX")
    set (DEFAULT_CS_CONFDIR "/var/tuxbox/config")
elseif (OperatingSystem MATCHES "Windows/Cygwin")
    add_definitions ("-DOS_CYGWIN32 -static -DHAVE_PCSC")
    set (DEFAULT_CS_CONFDIR ".")
elseif (OperatingSystem MATCHES "FreeBSD")
    add_definitions ("-DOS_FREEBSD")
    set (DEFAULT_CS_CONFDIR ".")
elseif (OperatingSystem MATCHES "FriendlyARM")
    add_definitions ("-DOS_LINUX -DARM")
    set (DEFAULT_CS_CONFDIR ".")
endif (OperatingSystem MATCHES "Linux")

set (CS_CONFDIR ${DEFAULT_CS_CONFDIR} CACHE STRING "Default path for the config files")
add_definitions ("-DCS_CONFDIR=\\\"${CS_CONFDIR}\\\"")

################################################################################
# Hardware and OS
################################################################################
set (CS_OS_CPU ${CMAKE_SYSTEM_PROCESSOR})
set (CS_OSTYPE ${CS_OS_CPU}-${CS_OS_HW}-${CS_OS_SYS})

add_definitions ("-DUSE_CMAKE")
add_definitions ("-DCS_OSTYPE=\\\"${CS_OSTYPE}\\\"")
add_definitions ("-DCS_OS_CPU=\\\"${CS_OS_CPU}\\\"")
add_definitions ("-DCS_OS_HW=\\\"${CS_OS_HW}\\\"")
add_definitions ("-DCS_OS_SYS=\\\"${CS_OS_SYS}\\\"")


################################################################################
# 32-bit system or 64-bit system?
################################################################################
set (CS_OS_ARCH 0) 
if (OperatingSystem MATCHES "Linux" OR OperatingSystem MATCHES "Windows/Cygwin")

	if (CMAKE_SIZEOF_VOID_P MATCHES "4")		# 32 bit
		set (CS_OS_ARCH 32)

	else (CMAKE_SIZEOF_VOID_P MATCHES "4")

		if (CMAKE_SIZEOF_VOID_P MATCHES "8")	# 64 bit
			set (CS_OS_ARCH 64)
		endif (CMAKE_SIZEOF_VOID_P MATCHES "8")

	endif (CMAKE_SIZEOF_VOID_P MATCHES "4")
	add_definitions ("-DCS_OS_ARCH=\\\"${CS_OS_ARCH}\\\"")

endif()


################################################################################
# Targets
################################################################################
if (HAVE_PCSC)
	if (NOT OperatingSystem MATCHES "Mac OS X")
	if (NOT OperatingSystem MATCHES "Windows/Cygwin")
		target_link_libraries (${exe_name} pcsclite)
	endif (NOT OperatingSystem MATCHES "Windows/Cygwin")
	endif (NOT OperatingSystem MATCHES "Mac OS X")
endif (HAVE_PCSC)


#----------------------- specific options ------------------------------

if (OperatingSystem MATCHES "Linux")
elseif (OperatingSystem MATCHES "Mac OS X")
    FIND_LIBRARY (PCSC_LIBRARY PCSC)
    message (STATUS "OS X system PCSC : ${PCSC_LIBRARY}")
    target_link_libraries ( ${exe_name} ${PCSC_LIBRARY})
    set (HAVE_PCSC "1")
    FIND_LIBRARY (IOKit_LIBRARY IOKit)
    target_link_libraries ( ${exe_name} ${IOKit_LIBRARY})
    FIND_LIBRARY (CoreFoundation_LIBRARY CoreFoundation)
    target_link_libraries ( ${exe_name} ${CoreFoundation_LIBRARY})
elseif (OperatingSystem MATCHES "Tuxbox")
    target_link_libraries ( ${exe_name} dl)
elseif (OperatingSystem MATCHES "TripleDragon")
    target_link_libraries ( ${exe_name} dl)
elseif (OperatingSystem MATCHES "SlugOS")
elseif (OperatingSystem MATCHES "OpenWRT")
elseif (OperatingSystem MATCHES "Fonera2")
elseif (OperatingSystem MATCHES "DIR-825")
elseif (OperatingSystem MATCHES "agv2+w")
elseif (OperatingSystem MATCHES "WRT54G")
elseif (OperatingSystem MATCHES "Amino")
elseif (OperatingSystem MATCHES "QboxHD")
elseif (OperatingSystem MATCHES "Windows/Cygwin")
    message (STATUS "Windows system PCSC : winscard.dll")
    target_link_libraries (${exe_name} winscard)
    target_link_libraries (${exe_name} setupapi )
    target_link_libraries (${exe_name} ole32)
    target_link_libraries (${exe_name} shell32)
elseif (OperatingSystem MATCHES "NeutrinoHD")
    target_link_libraries ( ${exe_name} rt nxp )
elseif (OperatingSystem MATCHES "AZBox")
    add_library(xcas STATIC IMPORTED)
    set_property(TARGET xcas PROPERTY IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/openxcas/libOpenXCASAPI.a)
    target_link_libraries(${exe_name} xcas)
endif (OperatingSystem MATCHES "Linux")


#----------------------- global compile and link options ------------------------------

# some optimisations
if (OperatingSystem MATCHES "Mac OS X")
    add_definitions ("-Winline -Wall -Wextra -m32 -mmacosx-version-min=10.5 -isysroot /Developer/SDKs/MacOSX10.5.sdk")
    set (CMAKE_C_FLAGS_DEBUG "-O0 -ggdb")
    set (CMAKE_CXX_FLAGS_DEBUG "-O0 -ggdb")
elseif (OS_SYSTEM_NAME MATCHES "NSLU2")
    add_definitions ("-O2 -Winline -Wall")
elseif (OS_SYSTEM_NAME MATCHES "WRT350NV2")
#    add_definitions ("-O2 -Winline -Wall -finline-functions -fomit-frame-pointer")
# Definitions above temp. disabled for wrt350nv2 - produces much bigger binary-file in size. -O2 is enough and results in a smaller binary
    add_definitions ("-O2")
elseif (OS_SYSTEM_NAME MATCHES "Dockstar")
    add_definitions ("-O2 -Winline -Wall")
elseif (OS_SYSTEM_NAME MATCHES "Padre")
    add_definitions ("-O2 -Winline -Wall -finline-functions -fomit-frame-pointer")
elseif (OS_SYSTEM_NAME MATCHES "FriendlyARM")
    add_definitions ("-O2 -Winline -Wall -finline-functions -fomit-frame-pointer")
else (OperatingSystem MATCHES "Mac OS X")
    add_definitions ("-Winline -Wall -Wextra")
    set (CMAKE_C_FLAGS "-O2")
    set (CMAKE_C_FLAGS_DEBUG "-O0 -g")
    set (CMAKE_CXX_FLAGS_DEBUG "-O0 -g")
endif (OperatingSystem MATCHES "Mac OS X")

# we don't want the '-rdynamic' in the link command
set (CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")

# we want to strip if not Debug build
if (OperatingSystem MATCHES "Mac OS X")
  if (NOT CMAKE_BUILD_TYPE STREQUAL Debug)
    set (CMAKE_EXE_LINKER_FLAGS "-s -m32 -mmacosx-version-min=10.5 -isysroot /Developer/SDKs/MacOSX10.5.sdk")
  else (NOT CMAKE_BUILD_TYPE STREQUAL Debug)
    message (STATUS "  building with debug")
    set (CMAKE_EXE_LINKER_FLAGS "-ggdb -m32 -mmacosx-version-min=10.5 -isysroot /Developer/SDKs/MacOSX10.5.sdk")
  endif (NOT CMAKE_BUILD_TYPE STREQUAL Debug)
else (OperatingSystem MATCHES "Mac OS X")
  if (NOT CMAKE_BUILD_TYPE STREQUAL Debug)
    set (CMAKE_EXE_LINKER_FLAGS "-s")
  else (NOT CMAKE_BUILD_TYPE STREQUAL Debug)
    message (STATUS "  building with debug")
    set (CMAKE_EXE_LINKER_FLAGS "-ggdb")
  endif (NOT CMAKE_BUILD_TYPE STREQUAL Debug)
endif (OperatingSystem MATCHES "Mac OS X")

if (OperatingSystem MATCHES "Windows/Cygwin")
    set (CMAKE_EXE_LINKER_FLAGS "--enable-stdcall-fixup")
endif (OperatingSystem MATCHES "Windows/Cygwin")

